---
- hosts: localhost
  gather_facts: False
  vars:
    region: 'us-east-1' # replace with your region
    cluster_name: 'poojit' # replace with your cluster name
    nodegroup_name: 'private-nodes' # replace with your nodegroup name
    profile: 'default' # replace with your AWS CLI profile name

  tasks:
  - name: Install necessary dependencies
    pip:
      name: ['boto3', 'botocore']

  - name: Get latest AMI ID
    shell: >
      aws --region {{ region }} --profile {{ profile }} ec2 describe-images --owners amazon --filters 'Name=name,Values=amzn2-ami-hvm-2.0.????????-x86_64-gp2' 'Name=state,Values=available' --query 'sort_by(Images, &CreationDate)[-1].[ImageId]' --output text
    register: ami_id

  - name: Get Auto Scaling group name
    shell: >
      aws --region {{ region }} --profile {{ profile }} eks describe-nodegroup --cluster-name {{ cluster_name }} --nodegroup-name {{ nodegroup_name }} --query 'nodegroup.resources.autoScalingGroups[0].name' --output text
    register: asg_name

  - name: Update Auto Scaling group with new AMI ID
    shell: >
      aws --region {{ region }} --profile {{ profile }} autoscaling update-auto-scaling-group --auto-scaling-group-name {{ asg_name.stdout }} --launch-configuration-name {{ ami_id.stdout }}

  - name: Set desired capacity of Auto Scaling group to double the current capacity to start the replacement of instances
    shell: >
      aws --region {{ region }} --profile {{ profile }} autoscaling set-desired-capacity --auto-scaling-group-name {{ asg_name.stdout }} --desired-capacity 2

  - name: Wait for new instances to be ready
    pause:
      minutes: 10

  - name: Set desired capacity of Auto Scaling group back to original capacity to remove old instances
    shell: >
      aws --region {{ region }} --profile {{ profile }} autoscaling set-desired-capacity --auto-scaling-group-name {{ asg_name.stdout }} --desired-capacity 1

